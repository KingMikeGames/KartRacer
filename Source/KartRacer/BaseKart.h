// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "GameFramework/Pawn.h"
#include "BaseKart.generated.h"

UCLASS()
class KARTRACER_API ABaseKart : public APawn
{
	GENERATED_BODY()

public:
	// Sets default values for this pawn's properties
	ABaseKart();

	// Called when the game starts or when spawned
	virtual void BeginPlay() override;
	
	// Called every frame
	virtual void Tick( float DeltaSeconds ) override;

	// Called to bind functionality to input
	virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;

	// components

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
		UStaticMeshComponent* CollisionMesh;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
		UStaticMeshComponent* BodyMesh;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
		TArray<UArrowComponent*> Arrows;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
		TArray<UStaticMeshComponent*> Wheels;
	
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
		USpringArmComponent* CameraBoom;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
		UCameraComponent* Camera;


	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Arrow")
		UArrowComponent* FrontRightArrow;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Arrow")
		UArrowComponent* FrontLeftArrow;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Arrow")
		UArrowComponent* BackRightArrow;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Arrow")
		UArrowComponent* BackLeftArrow;


	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Wheel")
		UStaticMeshComponent* FrontRightWheel;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Wheel")
		UStaticMeshComponent* FrontLeftWheel;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Wheel")
		UStaticMeshComponent* BackRightWheel;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Wheel")
		UStaticMeshComponent* BackLeftWheel;

	// Variables to be changed in editor

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Adjustables")
		float m_SuspensionLength;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Physics")
		float m_GravityStrength;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Control")
		float m_InnerDriftControlModifier;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Control")
		float m_OuterDriftControlModifier;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Control")
		float m_AutomaticDriftRotation;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Control")
		float m_OverallDriftControllModifier;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Control")
		float m_MaxSpeedForMaxTurnRadius;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Control")
		float m_MaxSpeed;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Control")
		float m_MinTurnRadius;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Control")
		float m_MaxTurnRadius;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Control")
		float m_AccelerationForce;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Control")
		float m_ReverseForce;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Control")
		float m_BreakForce;

	// blueprint callable functions
	UFUNCTION(BlueprintCallable, Category = "Forces")
		void ApplyForwardForce(float Force);

	UFUNCTION(BlueprintCallable, Category = "Forces")
		void ApplyForce(FVector Force);

private:
	// Used to ignore rotations generated by unreal
	FRotator		m_RotationToBeMaintained;

	float			m_WheelRadius;

	int32			m_GroundedWheelsLastFrame;
	int32			m_GroundedWheels;
	int32			m_WheelsOffRoad;
	int32			m_DriftDirection;

	FVector			m_GravityDirection;
	FVector			m_LocationLastFrame;

	bool			m_Drifting;

	
	
	/* Sets the rotation to RotatationToBeMaintained. 
	This is done to avoid rotations generated by Unreal */
	void ResetRotation();
	FVector GetGravityDirection();
	void UpdateSuspension();
	void CalculatebodyRotation();
	void CheckIfLanded();
	void Landed();
	void DealWithGravity();
	

	// Network Functions
	UFUNCTION(Server, WithValidation, Reliable)
		void ServerRPCSendTurnAxis(float TurnAxis);

	UFUNCTION(NetMulticast, Reliable)
		void MulticastRPCTurnAxis(float TurnAxis);

	UFUNCTION(Server, WithValidation, Reliable)
		void ServerRPCSendGasBreak(float GasAxis);

	UFUNCTION(NetMulticast, Reliable)
		void MulticastRPCGasBreak(float GasAxis);

	// Input functions
	void ApplyGasBreak(float AxisValue);
	void Turn(float AxisValue);
	void LookBack();
	void DriftHop();
	void UseItem();
	
	void PerformTurning(float AxisValue);
	void PerformGasBreak(float AxisValue);

	//checks
	bool IsGrounded();
};
